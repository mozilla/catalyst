# Addon Performance Comparison: Default Users vs Self-Installed Top100 Addon Users
slug: top100-addon-performance-comparison

# CTE to get top 100 addons and define self-installed addon criteria
prerequisite_ctes: |
  top_100_addons AS (
    SELECT addon_id
    FROM (
      SELECT addon_id, avg(dau) as DAU
      FROM mozdata.telemetry.addons_daily
      WHERE submission_date >= (CURRENT_DATE - INTERVAL '7' day)
        AND is_system = false
        AND addon_id not like '%mozilla%'
      GROUP BY 1
      ORDER BY 2 DESC
      LIMIT 100
    )
  )

branches:
  - name: "default"
    startDate: '2025-09-01'
    endDate: '2025-09-07'
    channel: "release"
    # CONTROL GROUP: Users with NO self-installed addons AND no top100 addons
    custom_condition: |
      app_version_major = 142 
      AND NOT EXISTS(
        SELECT 1
        FROM UNNEST(JSON_EXTRACT_ARRAY(m.metrics.object.addons_active_addons)) AS addon
        WHERE JSON_EXTRACT_SCALAR(addon, '$.scope') = '1'
          AND JSON_EXTRACT_SCALAR(addon, '$.signedState') = '2'
          AND JSON_EXTRACT_SCALAR(addon, '$.isSystem') = 'false'
      )
      AND NOT EXISTS(
        SELECT 1
        FROM UNNEST(JSON_EXTRACT_ARRAY(m.metrics.object.addons_active_addons)) AS addon
        JOIN top_100_addons t100 ON JSON_EXTRACT_SCALAR(addon, '$.id') = t100.addon_id
      )
  - name: "top100_addon_users"
    startDate: '2025-09-01'
    endDate: '2025-09-07'
    channel: "release"
    # TREATMENT GROUP: Users with self-installed addons AND at least one top100 addon
    custom_condition: |
      app_version_major = 142 
      AND EXISTS(
        SELECT 1
        FROM UNNEST(JSON_EXTRACT_ARRAY(m.metrics.object.addons_active_addons)) AS addon
        JOIN top_100_addons t100 ON JSON_EXTRACT_SCALAR(addon, '$.id') = t100.addon_id
      )

# Traditional OS segments
segments:
  - Windows
  - Linux
  - Mac

# Performance histogram metrics to analyze (using simple list format)
histograms:
  # Memory
  - metrics.memory_distribution.memory_total

  # Top level pageload
  - metrics.timing_distribution.performance_pageload_fcp
  - metrics.timing_distribution.performance_time_response_start
  - metrics.timing_distribution.performance_pageload_load_time
  - metrics.timing_distribution.perf_largest_contentful_paint

  # Networking
  - metrics.timing_distribution.networking_dns_lookup_time
  - metrics.timing_distribution.network_tcp_connection
  - metrics.timing_distribution.network_tls_handshake
  - metrics.timing_distribution.networking_transaction_wait_time

max_parallel_queries: 1
sample_pct: auto
